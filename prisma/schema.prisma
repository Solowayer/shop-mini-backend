generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  sid    String   @id @default(cuid())
  expire DateTime
  sess   Json
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String  @unique
  phoneNumber  String?
  passwordHash String
  role         Role    @default(USER)

  profile  Profile?
  adresses DeliveryAddress[]
  reviews  Review[]
  orders   Order[]
  lists    List[]

  seller Seller?
  cart   Cart?
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName  String

  gender Gender?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

enum Role {
  USER
  ADMIN
  SELLER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model DeliveryAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  street     String
  additional String

  city       String
  region     String
  postalCode String

  phoneNumber String
  note        String

  isPreffered Boolean

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating  Int
  comment String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model List {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  products ProductsOnLists[]
}

model ProductsOnLists {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  list   List @relation(fields: [listId], references: [id])
  listId Int

  @@id([productId, listId])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  recipient   String
  adress      String
  totalAmount Float       @default(0)
  status      OrderStatus @default(PENDING)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId Int?
}

// model OrderDetails {
//   id        Int      @id @default(autoincrement())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   orderId    String
//   address    String
//   city       String
//   state      String
//   country    String
//   postalCode String
// }

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

model Seller {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  adress      String
  description String?

  email       String @unique
  phoneNumber String @unique

  pib String

  products Product[]
  orders   Order[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Product {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images      String[]
  name        String
  description String?
  price       Float

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId Int?

  published Boolean @default(false)

  cartItems CartItem[]

  reviews Review[]
  rating  Float    @default(0)

  lists ProductsOnLists[]
}

// ! isAvailable

model Category {
  id   Int    @id @default(autoincrement())
  slug String @unique

  name String @unique

  parentId Int?

  parent   Category?  @relation("ChildrensParents", fields: [parentId], references: [id])
  children Category[] @relation("ChildrensParents")

  product Product[]
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalAmount   Int @default(0)
  totalQuantity Int @default(0)

  cartItems CartItem[]

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  image    String?
  quantity Int
  price    Float

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String
}
