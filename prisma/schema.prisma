// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username    String
  email       String  @unique
  phoneNumber String?

  passwordHash String

  role Role @default(USER)

  orders  Order[]
  reviews Review[]
  carts   Cart[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Seller {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String @unique
  password String

  pib String

  name        String
  description String
  adress      String

  products Product[]
  orders   Order[]
}

model Product {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images      String[]
  name        String
  description String?
  price       Float

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId Int?

  published Boolean

  cartItems  CartItem[]
  orderItems OrderItem[]

  reviews Review[]
  rating  Float    @default(0)
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  parent   Category? @relation("SubCategories", fields: [parentId], references: [id])
  parentId Int?

  subCategories Category[] @relation("SubCategories")

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating  Int
  comment String?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int

  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int
  price    Float

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  adress      String
  totalAmount Float       @default(0)
  status      OrderStatus @default(PENDING)

  orderItems OrderItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  seller   Seller? @relation(fields: [sellerId], references: [id])
  sellerId Int?
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

model OrderItem {
  id Int @id @default(autoincrement())

  quantity Int

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

// model OrderDetails {
//   id         String   @id @default(uuid())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   orderId    String
//   address    String
//   city       String
//   state      String
//   country    String
//   postalCode String
// }
